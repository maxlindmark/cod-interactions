---
title: "Collate stomach content data"
author: "Max Lindmark"
date: "`r format(Sys.time(), '%d %B, %Y')`"
format: 
  html:
    page-layout: full
    embed-resources: true
knitr: 
  opts_chunk:
    fig.align: center
    out-width: 80%
editor: source
execute: 
  echo: true
  eval: true
  cache: false
---

## Load packages

```{r load libraries}
#| message: false
#| warning: false

# Load libraries, install if needed
pkgs <- c("tidyverse", "readxl", "tidylog", "RCurl", "janitor", "mapplots", "ggridges", 
          "icesDatras", "raster", "devtools") 

if(length(setdiff(pkgs, rownames(installed.packages()))) > 0){

    install.packages(setdiff(pkgs, rownames(installed.packages())), dependencies = T)
  
}

invisible(lapply(pkgs, library, character.only = T))

# Source code for map plots
source_url("https://raw.githubusercontent.com/maxlindmark/cod-interactions/main/R/functions/map-plot.R")

home <- here::here()
```

# Load stomach, biological and trawl data
## Stomach

```{r merge stomach}
#| message: false
#| warning: false

# Flounder
bits_2015_q4_fle <- readxl::read_xls(paste0(home, "/data/stomach-data/BITS/stomach/2017-10-31_database_COD_FLE_part_2_Kevin.xls"), sheet = 3) %>% 
  mutate(Year = 2015) %>% 
  clean_names()

bits_2016_q1_fle <- readxl::read_xls(paste0(home, "/data/stomach-data/BITS/stomach/2017-10-31_database_COD_FLE_part_2_Kevin.xls"), sheet = 4) %>% 
  clean_names()

bits_2016_q4_fle <- readxl::read_xls(paste0(home, "/data/stomach-data/BITS/stomach/2017-10-31_database_COD_FLE_part_2_Kevin.xls"), sheet = 5) %>% 
  clean_names()

bits_2017_q1_fle <- readxl::read_xlsx(paste0(home, "/data/stomach-data/BITS/stomach/02.01.2019_database_COD_FLE.xlsx"), sheet = 1) %>% 
  clean_names()

bits_2017_q4_fle <- readxl::read_xlsx(paste0(home, "/data/stomach-data/BITS/stomach/02.01.2019_database_COD_FLE.xlsx"), sheet = 2) %>% 
  clean_names() %>% 
  mutate(year = 2017)

bits_2018_q1_fle <- readxl::read_xlsx(paste0(home, "/data/stomach-data/BITS/stomach/database_22.12.2019_part 2.xlsx"), sheet = 2) %>% 
  clean_names()

bits_2019_q4_fle <- readxl::read_xlsx(paste0(home, "/data/stomach-data/BITS/stomach/!database_2020_SWE.xlsx"), sheet = 4) %>% 
  clean_names()

bits_2020_q1_fle <- readxl::read_xlsx(paste0(home, "/data/stomach-data/BITS/stomach/!database_2020_SWE.xlsx"), sheet = 5) %>% 
  clean_names()

bits_2020_q4_fle <- readxl::read_xlsx(paste0(home, "/data/stomach-data/BITS/stomach/!database_2021_SWE.xlsx"), sheet = 2) %>% 
  clean_names() # why 2020 data in 2021 file... ?

bits_2021_q4_fle <- readxl::read_xlsx(paste0(home, "/data/stomach-data/BITS/stomach/!database_2021_SWE.xlsx"), sheet = 3) %>% 
  clean_names()

bits_2022_q1_fle <- readxl::read_xlsx(paste0(home, "/data/stomach-data/BITS/stomach/! database 2023_all.xlsx"), sheet = 3) %>% 
  clean_names()

bits_2022_q4_fle <- readxl::read_xlsx(paste0(home, "/data/stomach-data/BITS/stomach/! database 2023_all.xlsx"), sheet = 4) %>% 
  clean_names()



# Cod
bits_2015_q4_cod <- readxl::read_xls(paste0(home, "/data/stomach-data/BITS/stomach/2017-06-29_database_COD_part_1_Kevin.xls"), sheet = 1) %>% 
  clean_names()

bits_2016_q1_cod <- readxl::read_xls(paste0(home, "/data/stomach-data/BITS/stomach/2017-06-29_database_COD_part_1_Kevin.xls"), sheet = 2) %>% 
  clean_names()

# This q-year combo was sent in two batches
bits_2016_q1_cod_v2 <- readxl::read_xlsx(paste0(home, "/data/stomach-data/BITS/stomach/28.12.2018_database_COD.xlsx"), sheet = 1) %>% 
  clean_names()

bits_2016_q4_cod <- readxl::read_xls(paste0(home, "/data/stomach-data/BITS/stomach/2017-10-31_database_COD_FLE_part_2_Kevin.xls"), sheet = 6) %>% 
  clean_names()

bits_2017_q1_cod <- readxl::read_xlsx(paste0(home, "/data/stomach-data/BITS/stomach/28.12.2018_database_COD.xlsx"), sheet = 2) %>% 
  clean_names() %>% 
  mutate(predator_code = "COD")

bits_2017_q4_cod <- readxl::read_xlsx(paste0(home, "/data/stomach-data/BITS/stomach/28.12.2018_database_COD.xlsx"), sheet = 3) %>% 
  clean_names()

bits_2018_q1_cod <- readxl::read_xlsx(paste0(home, "/data/stomach-data/BITS/stomach/9.07.2019_database_part 1.xlsx"), sheet = 2) %>% 
  clean_names()

bits_2018_q4_cod <- readxl::read_xlsx(paste0(home, "/data/stomach-data/BITS/stomach/database_22.12.2019_part 2.xlsx"), sheet = 1) %>% 
  clean_names()

bits_2019_q4_cod <- readxl::read_xlsx(paste0(home, "/data/stomach-data/BITS/stomach/!database_2020_SWE.xlsx"), sheet = 2) %>% 
  clean_names()

bits_2020_q1_cod <- readxl::read_xlsx(paste0(home, "/data/stomach-data/BITS/stomach/!database_2020_SWE.xlsx"), sheet = 3) %>% 
  clean_names() %>% 
  mutate(quarter = 1,
         predator_code = "COD")

bits_2020_q4_cod <- readxl::read_xlsx(paste0(home, "/data/stomach-data/BITS/stomach/!database_2021_SWE.xlsx"), sheet = 1) %>% 
  clean_names()

bits_2021_q1_cod <- readxl::read_xlsx(paste0(home, "/data/stomach-data/BITS/stomach/Sanoba_SWE_2021_Q1_COD.xlsx"), sheet = 1) %>% 
  clean_names()

bits_2021_q4_cod <- readxl::read_xlsx(paste0(home, "/data/stomach-data/BITS/stomach/!database_2021_SWE.xlsx"), sheet = 4) %>% 
  clean_names()

bits_2022_q1_cod <- readxl::read_xlsx(paste0(home, "/data/stomach-data/BITS/stomach/! database 2023_all.xlsx"), sheet = 1) %>% 
  clean_names()

bits_2022_q4_cod <- readxl::read_xlsx(paste0(home, "/data/stomach-data/BITS/stomach/! database 2023_all.xlsx"), sheet = 2) %>% 
  clean_names()


# Bind them together, then see what columns are missing from the base data
colnames(bits_2015_q4_fle)
colnames(bits_2016_q1_fle)
colnames(bits_2016_q4_fle)
colnames(bits_2017_q1_fle)
colnames(bits_2017_q4_fle)
colnames(bits_2018_q1_fle)
colnames(bits_2019_q4_fle)
colnames(bits_2020_q1_fle)
colnames(bits_2020_q4_fle)
colnames(bits_2021_q4_fle)
colnames(bits_2022_q1_fle)
colnames(bits_2022_q4_fle)

colnames(bits_2015_q4_cod)
colnames(bits_2016_q1_cod)
colnames(bits_2016_q1_cod_v2)
colnames(bits_2017_q1_cod)
colnames(bits_2017_q4_cod)
colnames(bits_2018_q1_cod)
colnames(bits_2018_q4_cod)
colnames(bits_2019_q4_cod)
colnames(bits_2020_q1_cod)
colnames(bits_2020_q4_cod)
colnames(bits_2021_q1_cod)
colnames(bits_2021_q4_cod)
colnames(bits_2022_q1_cod)
colnames(bits_2022_q4_cod)


# Looks like we have to bind_rows them and clean column names afterwards since they don't match...
stom <- bind_rows(
                  
                  # flounder
                  bits_2015_q4_fle %>% mutate(hn = as.character(hn),
                                              sample_12 = as.character(sample_12)),
                  bits_2016_q1_fle,
                  bits_2016_q4_fle %>% mutate(prey_weight = as.numeric(prey_weight),
                                              sample_12 = as.character(sample_12)),
                  bits_2017_q1_fle %>% mutate(hn = as.character(hn)),
                  bits_2017_q4_fle %>% mutate(hn = as.character(hn),
                                              parasites_in_stomach = as.character(parasites_in_stomach)),
                  bits_2018_q1_fle,
                  bits_2019_q4_fle %>% mutate(parasites_in_stomach = as.character(parasites_in_stomach)),
                  bits_2020_q1_fle %>% mutate(hn = as.character(hn),
                                              sample = as.character(sample)),
                  bits_2020_q4_fle %>% mutate(hn = as.character(hn)),
                  bits_2021_q4_fle %>% mutate(hn = as.character(hn),
                                              sample = as.character(sample)),
                  bits_2022_q1_fle %>% mutate(sd = as.numeric(sd),
                                              hn = as.character(hn),
                                              sample = as.character(sample)),
                  bits_2022_q4_fle %>% mutate(sd = as.numeric(sd),
                                              hn = as.character(hn),
                                              sample = as.character(sample)),
                  # cod
                  bits_2015_q4_cod %>% mutate(hn = as.character(hn),
                                              parasites_in_stomach = as.character(parasites_in_stomach),
                                              predator_gutted_weight = as.numeric(predator_gutted_weight),
                                              maturity = as.numeric(maturity)),
                  bits_2016_q1_cod %>% mutate(sample_1 = as.character(sample_1),
                                              sample_12 = as.character(sample_12),
                                              hn = as.character(hn),
                                              parasites_in_stomach = as.character(parasites_in_stomach),
                                              predator_gutted_weight = as.numeric(predator_gutted_weight),
                                              maturity = as.numeric(maturity)),
                  bits_2016_q1_cod_v2 %>% mutate(hn = as.character(hn),
                                                 stomach_state = as.character(stomach_state)),
                  bits_2017_q1_cod %>% mutate(stomach_state = as.character(stomach_state),
                                              gall_bladder = as.character(gall_bladder)),
                  bits_2017_q4_cod %>% mutate(hn = as.character(hn),
                                              stomach_state = as.character(stomach_state),
                                              gall_bladder = as.character(gall_bladder)),
                  bits_2018_q1_cod %>% mutate(hn = as.character(hn),
                                              sample = as.character(sample)),
                  bits_2018_q4_cod %>% mutate(hn = as.character(hn),
                                              gall_bladder = as.character(gall_bladder)),
                  bits_2019_q4_cod %>% mutate(hn = as.character(hn),
                                              parasites_in_stomach = as.character(parasites_in_stomach),
                                              sample = as.character(sample),
                                              gall_bladder = as.character(gall_bladder)),
                  bits_2020_q1_cod %>% mutate(hn = as.character(hn),
                                              parasites_in_stomach = as.character(parasites_in_stomach),
                                              stomach_state = as.character(stomach_state),
                                              sample = as.character(sample),
                                              gall_bladder = as.character(gall_bladder)),
                  bits_2020_q4_cod %>% mutate(hn = as.character(hn),
                                              parasites_in_stomach = as.character(parasites_in_stomach),
                                              sample = as.character(sample)),
                  bits_2021_q1_cod %>% mutate(sd = as.numeric(sd),
                                              hn = as.character(hn),
                                              parasites_in_stomach = as.character(parasites_in_stomach),
                                              sex = as.character(sex),
                                              stomach_state = as.character(stomach_state),
                                              sample = as.character(sample),
                                              gall_bladder = as.character(gall_bladder)),
                  bits_2021_q4_cod %>% mutate(hn = as.character(hn),
                                              sample = as.character(sample),
                                              gall_bladder = as.character(gall_bladder)),
                  bits_2022_q1_cod %>% mutate(sd = as.numeric(sd),
                                              hn = as.character(hn),
                                              sample = as.character(sample),
                                              gall_bladder = as.character(gall_bladder)),
                  bits_2022_q4_cod %>% mutate(sd = as.numeric(sd),
                                              hn = as.character(hn),
                                              stomach_state = as.character(stomach_state),
                                              sample = as.character(sample),
                                              gall_bladder = as.character(gall_bladder))
                  )


# Now fix the "sample" column. It's sometimes sample, sample_1, sometimes sample_12
stom <- stom %>% 
  mutate(data_id = paste(year, quarter, predator_code, sep = "_"))
  
sort(names(stom))
stom %>% 
  summarise(sample_na = unique(is.na(sample)),
            sample_1_na = unique(is.na(sample_1)),
            sample_12_na = unique(is.na(sample_12))) %>% 
  as.data.frame()

# Ok, most data have either/or, but some have multiple and some have 0....
unique(is.na(bits_2020_q1_fle$sample))

bits_2020_q1_fle %>% drop_na(sample)
bits_2016_q4_fle %>% drop_na(sample_1)
bits_2016_q4_fle %>% drop_na(sample_12)

# The zeroes simply have no sample, not too many rows though... What about the multiple ones?
stom %>% 
  mutate(sample_na = ifelse(is.na(sample), 1, 0),
         sample_1_na = ifelse(is.na(sample_1), 1, 0),
         sample_12_na = ifelse(is.na(sample_12), 1, 0),
         sum = sample_na + sample_1_na + sample_12_na) %>%
  group_by(data_id) %>% 
  summarise(sum2 = median(sum)) %>% 
  ungroup() %>% 
  as.data.frame()

stom %>% 
  mutate(sample_na = ifelse(is.na(sample), 0, 1),
         sample_1_na = ifelse(is.na(sample_1), 0, 1),
         sample_12_na = ifelse(is.na(sample_12), 0, 1),
         sum = sample_na + sample_1_na + sample_12_na) %>% 
  filter(sum > 1) %>%
  as.data.frame() %>% 
  ggplot(aes(as.numeric(sample_1), as.numeric(sample_12))) + 
  geom_point() + 
  geom_abline(color = "red", linewidth = 0.5)

# Ok, so sample_1 and sample_12 are the same. They get the appendix because there are duplicate columns. This is also verified in a excel file. Rename!
stom <- stom %>% 
  mutate(sample = ifelse(is.na(sample), sample_1, sample),
         sample = ifelse(is.na(sample), sample_12, sample)) %>% 
  drop_na(sample) %>% 
  dplyr::select(-sample_1, -sample_12)

colnames(stom)
str(stom)

# Column "sqare" a typo
stom <- stom %>% 
  mutate(square = ifelse(is.na(square), sqare, square)) %>% 
  dplyr::select(-sqare)

# Good for now. Now read the bottom trawl data and the biological data from the trawls
```

## Trawl

```{r merge trawl data}
# Read in trawl data. There's one file for cod and one for flounder
# They go up to 2020 Q1
# trawl_surveys_cod <- read.csv("data/stomach-data/BITS/trawl/Trawl Surveys Zincl (L) COD.csv", sep = ";")
# trawl_surveys_fle <- read.csv("data/stomach-data/BITS/trawl/Trawl Surveys Zincl (L) FLE.csv", sep = ";")

trawl_surveys_cod <- read_delim(paste0(home, "/data/stomach-data/BITS/trawl/Trawl Surveys Zincl (L) COD.csv"), delim = ";")
trawl_surveys_fle <- read_delim(paste0(home, "/data/stomach-data/BITS/trawl/Trawl Surveys Zincl (L) FLE.csv"), delim = ";")

# Combine for the two species, filter and clean!
trawl_data <- rbind(trawl_surveys_cod, trawl_surveys_fle) %>%
  clean_names() %>%
  mutate(swept_area = as.numeric(gsub(",", "\\.", swept_area)),
         kg_hour = as.numeric(gsub(",", "\\.", kg_hour)),
         dist = as.numeric(gsub(",", "\\.", dist))) %>% 
  as.data.frame()

str(trawl_data)

sort(unique(trawl_data$lat)) %>% head(20)

# For these coordinates, we can use the function Fede provided:
format.position <- function(x){
  sign.x <- sign(x)
  x <- abs(x)
  x <- ifelse(nchar(x)==3, paste("0",x,sep=""), x)
  x <- ifelse(nchar(x)==2, paste("00",x,sep=""), x)
  x <- ifelse(nchar(x)==1, paste("000",x,sep=""), x)
  dec.x <- as.numeric(paste(substring(x,1,2)))+as.numeric(paste(substring(x,3,4)))/60
  dec.x <- sign.x*dec.x
}

# Apply function
trawl_data$lat <- format.position(trawl_data$lat)
trawl_data$lon <- format.position(trawl_data$long)

trawl_data <- sdmTMB::add_utm_columns(trawl_data, ll_names = c("lon", "lat"))

# SMHI serial no?
t <- trawl_data %>% drop_na(smhi_serial_no)

plot_map + 
  geom_point(data = trawl_data, aes(X*1000, Y*1000), alpha = 0.5, size = 0.3) +
  facet_grid(quarter ~ year) + 
  theme_sleek(base_size = 8)

# Check bottom depth
hist(trawl_data$bottom_depth)

trawl_data %>% 
  mutate(depth2 = ifelse(bottom_depth > 250, "deeper than 250 m", "normal")) %>% 
  ggplot(aes(lon, lat, color = as.factor(year), shape = as.factor(quarter))) +
  geom_point() + 
  facet_wrap(~ depth2, ncol = 1) + 
  coord_sf()

trawl_data %>% 
  mutate(haul_id = paste(year, quarter, haul)) %>% 
  distinct(haul_id, .keep_all = TRUE) %>% 
  mutate(depth2 = ifelse(bottom_depth > 250, "deeper than 250 m", "normal")) %>% 
  group_by(year, depth2) %>% 
  summarise(n = n()) %>% 
  ggplot(aes(year, n, fill = depth2)) + 
  geom_bar(stat = "identity")

# This is strange. I will get back to this in later scripts and likely use modelled depths in the analysys
```

## Biological data

```{r read bio data}
trawl_surveys_s_cod <- read_delim(paste0(home, "/data/stomach-data/BITS/biological/Trawl Surveys (S) COD.csv"), delim = ";")
trawl_surveys_s_flounder <- read_delim(paste0(home, "/data/stomach-data/BITS/biological/Trawl Surveys (S) FLE.csv"), delim = ";")

trawl_surveys_s_cod$Species <- "Cod"
trawl_surveys_s_flounder$Species <- "Flounder"

bio_data <- bind_rows(trawl_surveys_s_cod, trawl_surveys_s_flounder) %>%
  clean_names()
```

## Join trawl and biological data, and then stomach

```{r join trawl and biological}
# Join the trawl, bio and stomach data. First create a unique ID.
# In earlier versions I had a column called otolith number (fish ID!), which was really fish id, but it isn't here anymore.

# Add a new species code in the trawl data that matches the stomach data 
trawl_data <- trawl_data %>% mutate(predator_code = ifelse(species == "cod", "COD", "FLE"))

bio_data <- bio_data %>% mutate(predator_code = ifelse(species == "Cod", "COD", "FLE"))

unique(is.na(trawl_data[, c("year", "quarter", "haul")]))

# Go ahead
trawl_data$haul_id <- paste(trawl_data$year,
                            trawl_data$quarter,
                            trawl_data$haul,
                            sep = "_")

# Should be a unique ID per length and predator code
trawl_data %>% 
  group_by(haul_id, lengthcl, predator_code) %>% 
  mutate(n = n()) %>% 
  ungroup() %>% 
  distinct(n)

# Now we want the cpue of a species-size combination as a column, then make it distinct per haul
trawl_data_unique_haul <- trawl_data %>% 
  dplyr::select(-species, -lengthcl, -predator_code, -kg_hour, -tot_no_hour, -no_hour, -length_measure_type, -sex, -long) %>% # Remove any column that has anything to do with catch, because that info should come from the species dataframes below. I.e., after left_joining this and the catch data, any 0 zero catches should be NA in the joined data
  distinct(haul_id, .keep_all = TRUE)

trawl_data_cod <- trawl_data %>% 
  filter(!validity == "I") %>% 
  filter(predator_code == "COD") %>% 
  mutate(kg = kg_hour * (duration / 60),
         kg_km2 = kg / swept_area) %>% # make it biomass density
  drop_na(kg_km2) %>% 
  mutate(size_group = ifelse(lengthcl >= 100 & lengthcl < 250, "small", NA),
         size_group = ifelse(lengthcl >= 250 & lengthcl < 500, "medium", size_group)) %>% 
  group_by(haul_id, size_group) %>% 
  summarise(kg_km2 = sum(kg_km2)) %>% 
  filter(size_group %in% c("small", "medium")) %>% 
  pivot_wider(names_from = size_group, values_from = kg_km2) %>% 
  rename(mcod_kg_km2 = medium,
         scod_kg_km2 = small) %>% 
  mutate(mcod_kg_km2 = replace_na(mcod_kg_km2, 0),
         scod_kg_km2 = replace_na(scod_kg_km2, 0))

# Ok, so because this is catches (no hauls with no fish... the only reason I have 0 catches is if one of the size-groups doesn't have a catch!)

# Check with a haul_id
trawl_data %>% 
  filter(predator_code == "COD" & haul_id == "2015_1_20") 
trawl_data_cod

# Now do the same for flounder and join with the cod data, then with haul data!
# Different code because we do not need to worry about size
trawl_data_fle <- trawl_data %>% 
  filter(!validity == "I") %>% 
  filter(predator_code == "FLE") %>% 
  mutate(kg = kg_hour * (duration / 60),
         kg_km2 = kg / swept_area) %>% # make it biomass density
  #drop_na(kg_km2) %>% 
  mutate(size_group = ifelse(lengthcl >= 100, "benthic", "all")) %>% 
  group_by(haul_id, size_group) %>% 
  summarise(fle_kg_km2 = sum(kg_km2)) %>% 
  filter(size_group == "benthic")


# Add back summaries to dataframe of unique hauls
trawl_data_unique_haul <- trawl_data_unique_haul %>% filter(!validity == "I")

# length(unique(trawl_data_unique_haul$haul_id))
# length(unique(trawl_data_fle$haul_id))
# length(unique(trawl_data_cod$haul_id))

trawl_data_wide <- left_join(trawl_data_unique_haul, trawl_data_cod, by = "haul_id")
trawl_data_wide <- left_join(trawl_data_wide, trawl_data_fle, by = "haul_id")

# unique(is.na(trawl_data_wide))
# unique(is.na(trawl_data_fle))
# unique(is.na(trawl_data_cod))

# Ok, if there are NAs now in cod or flounder density... why is that? because it wasn't caught 
# trawl_data_wide %>% filter(is.na(fle_kg_km2)) %>% dplyr::select(haul_id) %>% head(10)
# trawl_data %>% filter(species == "flounder" & haul_id == "2015_4_15")

# Change the NA's to 0's... 
trawl_data_wide <- trawl_data_wide %>% 
  mutate(scod_kg_km2 = replace_na(scod_kg_km2, 0),
         mcod_kg_km2 = replace_na(mcod_kg_km2, 0),
         fle_kg_km2 = replace_na(fle_kg_km2, 0))

# Now add in the same ID in the bio_data
unique(is.na(bio_data[, c("year", "quarter", "haul")]))

# Go ahead
bio_data$haul_id <- paste(bio_data$year,
                          bio_data$quarter,
                          bio_data$haul,
                          sep = "_")
                                
unique(bio_data$haul_id) %>% head(20)

# Now join in trawl data into the bio data (and then into stomach data)
colnames(bio_data)
colnames(trawl_data_wide)

# Check first for overlapping columns, and if so, if one of the datasets has any NAs
common_cols <- intersect(colnames(bio_data), colnames(trawl_data_wide))

unique(is.na(trawl_data_wide[, common_cols]))
unique(is.na(bio_data[, common_cols]))

# Trawl data has some NA's in the common columns. Select only the important columns
colnames(trawl_data_wide)[!colnames(trawl_data_wide) %in% colnames(bio_data)]

trawl_data_wide <- trawl_data_wide %>% dplyr::select(haul_id, fle_kg_km2, mcod_kg_km2, scod_kg_km2, lat, lon, bottom_depth, X, Y, smhi_serial_no)

bio_data <- left_join(bio_data, trawl_data_wide, by = "haul_id")
```

Join trawl_bio data with stomach data

```{r}
# Now create a "bio_id" in the stomach + (bio + trawl) data frames
unique(is.na(bio_data[, c("year", "quarter", "individual_no", "predator_code")]))
sort(unique(stom$sample)) %>% head(20)

# The only ID I have in the stomach data is "sample". I need to match this to a string in the biodata...
bio_data <- bio_data %>% rename(sample = individual_no)

bio_data$pred_id <- paste(bio_data$year,
                          bio_data$quarter,
                          bio_data$predator_code,
                          #bio_data$fishno,
                          bio_data$sample, # this used to be called otolith no
                          sep = "_")

# Check it out
bio_data %>% 
  group_by(pred_id) %>% 
  mutate(n = n()) %>% 
  ungroup() %>% 
  distinct(n)

# There are some IDs rows with more than one row per individual (id), and the only thing separating those is the fishno column, which doesn't exist in the biological data. It's only 30 rows though.
bio_data %>% 
  group_by(pred_id) %>% 
  mutate(n = n()) %>% 
  filter(n > 1) %>% 
  arrange(pred_id) %>% 
  as.data.frame() %>% 
  head(20)

# Nothing I can do about this, missing 116 rows here because the it's clearly more than one individual per ID,
# and no other column that is also in the stomach data can make it unique 
bio_data <- bio_data %>% 
  group_by(pred_id) %>% 
  mutate(n = n()) %>%
  ungroup() %>% 
  filter(n == 1) 

# Create the same ID in the stomach data
names(stom)
stom %>% as.data.frame() %>% head(20)

unique(is.na(stom[, c("year", "quarter", "sample", "predator_code")]))
sort(unique(stom$sample)) %>% head(20)

stom$pred_id <- paste(stom$year,
                      stom$quarter,
                      stom$predator_code,
                      stom$sample,
                      sep = "_")

# First remove duplicate columns
common_cols <- intersect(colnames(stom), colnames(bio_data))

# And check if there are any NA's...
unique(is.na(stom[, common_cols]))
unique(is.na(bio_data[, common_cols]))

# Join!
dat <- left_join(stom %>% dplyr::select("pred_id", "data_id", "pred_weight", "pred_weight_g", "pred_size", "pred_size_cm",
                                        "gall_bladder", "stomach_state", "predator_code", "prey_weight",
                                        "prey_nr", "stage_digestion", "comment", "prey_size", "prey_sp_code", "length_code", 
                                        "n_empty", "n_with_food", "n_regurgitated"),
                 bio_data %>% dplyr::select("haul_id", "fle_kg_km2", "mcod_kg_km2", "scod_kg_km2", "year", "quarter", 
                                            "lat", "lon", "bottom_depth", "pred_id", "species", "lengthcl",
                                            "weight", "size", "subdiv", "date", "month", "X", "Y", "smhi_serial_no"))

length(unique(dat$pred_id))
length(unique(stom$pred_id))
length(unique(filter(stom, pred_id %in% bio_data$pred_id)$pred_id))

missing_ids <- stom %>% filter(!pred_id %in% bio_data$pred_id)
missing_ids$pred_id

# Weird characters make not all data matchable across the biological and stomach data sets. Drop these...
dat <- dat %>% filter(pred_id %in% c(bio_data$pred_id))

names(dat)
```

Clean data!

```{r clean}
d <- dat

# Scale up so 1 row = 1 pred and prey. Assume NA is 1. Remove 0 prey nr...
d <- d %>%
  mutate(prey_nr = replace_na(prey_nr, 1),
         prey_nr = as.integer(prey_nr)) %>% 
  filter(prey_nr > 0)

# Replicate rows prey_no times!
nrow(d)

d2 <- d %>%
  rename(prey_weight_g = prey_weight,
         prey_length_cm = prey_size) %>% 
  mutate(prey_weight_g = prey_weight_g / prey_nr,
         prey_number_type = ifelse(prey_nr > 1, "un_aggregated_from_average", "unique_id"),
         prey_weight_type = ifelse(prey_number_type == "un_aggregated_from_average", "pooled", "unique_id")) %>% 
  uncount(prey_nr)

nrow(d2)

# Now we can plot prop empty stomachs. It seems NA prey weight can be both that the weight is missing, and that there is no prey
d2 %>%
  filter(is.na(prey_weight_g)) %>%
  distinct(prey_sp_code) %>% 
  arrange(prey_sp_code) %>% 
  as.data.frame()

# Most NA prey weights are though also associated with NA prey sp
d2 %>%
  filter(is.na(prey_weight_g)) %>%
  as.data.frame() %>% 
  ggplot(aes(prey_sp_code)) + 
  geom_histogram(stat = "count") +
  theme(axis.text.x = element_text(angle = 90))

# If prey weight AND prey species is NA, set prey weight to 0. If prey are present I can't set weight to zero.
# Check first if there are any 0 weights with prey present. 
d2 %>% filter(prey_weight_g == 0) %>% as.data.frame()

# Yes, some. Change their weights to NA because they are not true zeroes, and set prey weight 0 if both prey species and prey weight is NA, because then I can calculate proportion empty stomachs manually using sum of prey weight per species
d2 <- d2 %>% 
  mutate(prey_weight_g = ifelse(!is.na(prey_sp_code) & prey_weight_g == 0, NA, prey_weight_g),
         prey_weight_g = ifelse(is.na(prey_sp_code) & is.na(prey_weight_g), 0, prey_weight_g))

# Now prey_weight_g == 0 should have only 1 row per predator because it's an empty stomach
d2 %>% 
  filter(prey_weight_g == 0) %>% 
  group_by(pred_id) %>% 
  mutate(n = n()) %>% 
  ungroup() %>% 
  distinct(n)

# Hmm why not?
d2 %>% 
  filter(prey_weight_g == 0) %>% 
  group_by(pred_id) %>% 
  mutate(n = n()) %>% 
  ungroup() %>% 
  filter(n > 1) %>% 
  arrange(pred_id) %>% 
  as.data.frame()
    
# Because it's not a unique ID because I don't have enough columns. Need to remove!
ids_to_remove <- d2 %>% 
  filter(prey_weight_g == 0) %>% 
  group_by(pred_id) %>% 
  mutate(n = n()) %>% 
  ungroup() %>% 
  filter(n > 1)

d2 <- d2 %>% filter(!pred_id %in% ids_to_remove$pred_id)

# Are there any prey weight == NA where I have prey size?
# Yes, but it's litter...
d2 %>% 
  filter(is.na(prey_weight_g)) %>% 
  distinct(prey_length_cm)

d2 %>% 
  filter(is.na(prey_weight_g)) %>% 
  filter(!is.na(prey_length_cm)) %>% 
  as.data.frame()

# Plot proportion empty stomachs by year, quarter and species
d2 %>% 
  drop_na(prey_weight_g) %>% # remember, these NA's are just missing weights, not empty stomachs!
  group_by(year, quarter, predator_code, pred_id) %>%
  summarise(tot_prey_weight = sum(prey_weight_g)) %>% 
  mutate(empty_stom = ifelse(tot_prey_weight == 0, "Y", "N")) %>% 
  ungroup() %>% 
  group_by(year, quarter, predator_code) %>%
  count(empty_stom) %>%
  pivot_wider(values_from = n, names_from = empty_stom) %>% 
  mutate(prop_empty = Y / (Y + N)) %>% 
  ggplot(aes(year, prop_empty, color = factor(quarter))) +
  geom_line() +
  geom_point() +
  facet_wrap(~predator_code, ncol = 1)

# Fix predator sizes
unique(is.na(d2$weight))
unique(is.na(d2$size)) 

# The above two come from bio data...
# Strange I have both these columns from the stomach data...
unique(is.na(d2$pred_weight))
unique(is.na(d2$pred_weight_g))
unique(is.na(d2$pred_size))
unique(is.na(d2$pred_size_cm))

d2 %>%
  filter(!is.na(pred_weight)) %>% 
  ggplot(aes(pred_weight, weight)) + 
  geom_abline(color = "red") +
  geom_point()

d2 %>%
  filter(!is.na(pred_weight_g)) %>% 
  ggplot(aes(pred_weight_g, weight)) +  
  geom_abline(color = "red") +
  geom_point()

# Seems we can use weight as the predator weight in grams..
d2 <- d2 %>% 
  dplyr::select(-pred_weight, -pred_weight_g) %>% 
  rename(pred_weight_g = weight)

# TODO: Really strange that predator size is all 9 in the biological data...
d2 %>%
  dplyr::select(size, pred_size, pred_size_cm, lengthcl) %>% 
  summary()

# What about the size in the stomach file?
d2 %>% filter(is.na(pred_size) & is.na(pred_size_cm))

# Many NAs for pred_size and pred_size_cm, but not lengthcl
d2 %>%
  filter(!is.na(pred_size_cm)) %>% 
  ggplot(aes(pred_size_cm, lengthcl)) +  
  geom_abline(color = "red") +
  geom_point()

d2 %>%
  filter(!is.na(pred_size)) %>% 
  ggplot(aes(pred_size, lengthcl)) +  
  geom_abline(color = "red") +
  geom_point()

# Ok, just use lengthcl, which is cm
d2 <- d2 %>% 
  dplyr::select(-pred_size_cm, -pred_size) %>% 
  rename(pred_length_cm = lengthcl) %>% 
  mutate(pred_length_cm = pred_length_cm/10)

# Plot length-weight
ggplot(d2, aes(pred_length_cm, pred_weight_g)) +
  geom_point() +
  facet_wrap(~species, ncol = 1)

# Add ices_rec based on coordinates
d2 <- d2 %>% 
  mutate(ices_rect = ices.rect2(lon, lat))

# Add in ICES sub-divisions
shape <- shapefile(paste0(home, "/data/ICES-StatRec-mapto-ICES-Areas/StatRec_map_Areas_Full_20170124.shp"))

pts <- SpatialPoints(cbind(d2$lon, d2$lat), 
                     proj4string = CRS(proj4string(shape)))

d2$subdiv <- over(pts, shape)$Area_27

# Rename subdivisions to the more common names and do some more filtering (by sub div and area)
sort(unique(d2$subdiv))

d2 <- d2 %>% 
  mutate(subdiv = factor(subdiv),
         subdiv = fct_recode(subdiv,
                         "24" = "3.d.24",
                         "25" = "3.d.25",
                         "26" = "3.d.26",
                         "27" = "3.d.27",
                         "28" = "3.d.28.2"))

plot_map + 
  geom_point(data = d2, aes(x = X*1000, y = Y*1000, color = subdiv), size = 1) +
  facet_wrap(~year)

# Rename and select key columns
d3 <- d2 %>% 
  rename(prey_latin_name = prey_sp_code) %>% 
  drop_na(prey_weight_g) %>% 
  mutate(predator_latin_name = ifelse(predator_code == "COD", "Gadus morhua", "Platichthys flesus"))
```

## Check complete data
Rename some columns and do a brief quality check

```{r explore and clean data}
glimpse(d3)

# Check some prey weights (unfortunately I can't check all species because I have no idea how big they become)
d3 %>%
  filter(prey_latin_name %in% c("Sprattus sprattus") & prey_weight_g > 0.01*16^3) %>% 
  arrange(desc(prey_weight_g)) %>% 
  as.data.frame()

# For herring not as much
d3 %>%
  filter(prey_latin_name %in% c("Clupea harengus") & prey_weight_g > 0.01*30^3) %>% 
  arrange(desc(prey_weight_g)) %>% 
  as.data.frame()

# Saduria? A few.
d3 %>%
  filter(prey_latin_name %in% c("Saduria entomon") & prey_weight_g > 10) %>% 
  arrange(desc(prey_weight_g)) %>% 
  as.data.frame()

d3 <- d3 %>% 
  mutate(keep = ifelse(prey_latin_name == "Saduria entomon" & prey_weight_g > 10, "N", "Y")) %>% 
  mutate(keep = ifelse(prey_latin_name %in% c("Sprattus sprattus") & prey_weight_g > 0.01*16^3, "N", keep)) %>% 
  filter(keep == "Y") %>% 
  dplyr::select(-keep)

# Are there prey with length but not weight?
d3 %>% 
  filter(is.na(prey_weight_g) & !is.na(prey_length_cm)) %>% 
  distinct(prey_latin_name)

# Only for litter: don't worry, no good LW relationship for it ...

# Plot size distribution by year
ggplot(d3, aes(x = pred_length_cm, y = factor(year), group = year)) + 
  geom_density_ridges(rel_min_height = 0.01, scale = 4, alpha = 0.4) +
  facet_wrap(~ predator_latin_name)

# Plot size distribution of prey by year
d3 %>% 
  drop_na(prey_weight_g) %>% 
  filter(prey_weight_g > 0) %>% 
  ggplot(aes(x = prey_weight_g, y = factor(year), group = year)) + 
  geom_density_ridges(rel_min_height = 0.01, scale = 4, alpha = 0.4) +
  scale_x_continuous(trans = "log10")

# Check feeding ratios
d3 %>% 
  mutate(rel_weight = prey_weight_g / pred_weight_g) %>% 
  arrange(desc(rel_weight)) %>%
  as.data.frame() %>% 
  head(20)

d3 <- d3 %>% 
  mutate(rel_weight = prey_weight_g / pred_weight_g) %>% 
  filter(rel_weight < quantile(rel_weight, probs = 0.9999)) #%>% 
  #arrange(desc(rel_weight)) %>%
  #as.data.frame() %>% 
  #head(20)

# Check catches
d3 %>% 
  distinct(mcod_kg_km2) %>% 
  arrange(desc(mcod_kg_km2)) %>%
  as.data.frame() %>% 
  head(20)

d3 %>% 
  distinct(scod_kg_km2) %>% 
  arrange(desc(scod_kg_km2)) %>%
  as.data.frame() %>% 
  head(20)

d3 %>% 
  distinct(fle_kg_km2) %>% 
  arrange(desc(fle_kg_km2)) %>%
  as.data.frame() %>% 
  head(20)

d4 <- d3 %>% 
  filter(mcod_kg_km2 < 15000,
         scod_kg_km2 < 15000,
         fle_kg_km2 < 15000)

# How many unique predator lengths per sample (fish)?
d3 %>% 
  group_by(pred_id, year) %>% # For each fish ID and pred_size, how many distinct sizes?
  mutate(n_sizes = length(unique(pred_length_cm))) %>% 
  ungroup() %>% 
  distinct(n_sizes, year) %>% 
  as.data.frame()
```

Save and explore data in another script

```{r save}
write_csv(d3, paste0(home, "/data/clean/full_stomach_data.csv"))
```

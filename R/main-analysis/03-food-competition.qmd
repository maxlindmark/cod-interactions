---
title: "Food competition analysis"
author: "Max Lindmark"
date: today
date-format: iso
toc: true
format: 
  html:
    page-layout: full
    embed-resources: true
knitr: 
  opts_chunk:
    fig.align: center
    out-width: 100%
editor: source
---

## Load packages

```{r load libraries}
#| message: false
#| warning: false

home <- here::here()

library(tidyverse)
library(tidylog)
library(RCurl)
library(sdmTMB)
library(RColorBrewer)
library(devtools)
library(patchwork)
library(ggstats)
library(ggh4x)
library(viridis)
library(sdmTMBextra)
library(ggcorrplot)

# Source map-plot
#source_url("https://raw.githubusercontent.com/maxlindmark/cod-interactions/main/R/functions/map-plot.R")
source(paste0(home, "/R/functions/map-plot.R"))
```

## Read data & prepare data

```{r read data}
#| warning: false

d <- read_csv(paste0(home, "/data/clean/aggregated_stomach_data.csv")) |> 
  drop_na(group) |> 
  drop_na(oxy)

# Calculate relative prey weights (saduria and benthos)
d <- d |> 
  drop_na(group) |> 
  drop_na(oxy) |> 
  rename(oxygen = oxy) %>%
  mutate(tot_weight = rowSums(select(., ends_with('_tot'))),  
         benthic_weight = amphipoda_tot + bivalvia_tot + gadus_morhua_tot +
           gobiidae_tot + mysidae_tot + non_bio_tot + 
           other_crustacea_tot + other_tot + other_pisces_tot + platichthys_flesus_tot +
           polychaeta_tot + saduria_entomon_tot) |> 
  rename(saduria_weight = saduria_entomon_tot,
         flounder_density = kg_km2_flounder,
         large_cod_density = kg_km2_large_cod,
         small_cod_density = kg_km2_small_cod) |> 
  mutate(tot_rel_weight = tot_weight / (pred_weight_g - tot_weight), 
         benthic_rel_weight = benthic_weight / (pred_weight_g - tot_weight),
         saduria_rel_weight = saduria_weight / (pred_weight_g - tot_weight)) |> 
  dplyr::select(-ends_with("_tot")) |> 
  dplyr::select(-predator_latin_name, date) |> 
  # Add small constant to large cod density because we want to take the log of it
  mutate(large_cod_density = ifelse(large_cod_density == 0,
                                    min(filter(d, kg_km2_large_cod > 0)$kg_km2_large_cod)*0.5,
                                    large_cod_density),
         flounder_density = ifelse(flounder_density == 0,
                                   min(filter(d, kg_km2_flounder > 0)$kg_km2_flounder)*0.5,
                                   flounder_density),
         small_cod_density = ifelse(small_cod_density == 0,
                                    min(filter(d, kg_km2_small_cod > 0)$kg_km2_small_cod)*0.5,
                                    small_cod_density)) |> 
  # scale variables
  mutate(fyear = as.factor(year),
         fquarter = as.factor(quarter),
         fhaul_id = as.factor(haul_id),
         depth_sc = as.numeric(scale(depth)),
         oxygen_sc = as.numeric(scale(oxygen)),
         density_saduria_sc = as.numeric(scale(density_saduria)),
         flounder_density_sc = as.numeric(scale(log(flounder_density))),
         large_cod_density_sc = as.numeric(scale(log(large_cod_density))),
         small_cod_density_sc = as.numeric(scale(log(small_cod_density)))) |> 
  # Scale length by group ..
  mutate(pred_length_cm_sc = as.numeric(scale(pred_length_cm)),
         .by = group)

t <- d |> filter(tot_rel_weight == 0)
nrow(t)/nrow(d)
```

Data overview

```{r}
d |> 
  rename("Relative benthic weight" = "benthic_rel_weight",
         "Relative Saduria weight" = "saduria_rel_weight") |> 
  pivot_longer(c("Relative benthic weight", "Relative Saduria weight")) |>
  mutate(group = str_to_sentence(group)) |> 
  ggplot(aes(value)) + 
  ggh4x::facet_grid2(factor(group, levels = c("Flounder", "Small cod", "Large cod"))~name,
                     scales = "free", independent = "all") + 
  geom_density(color = NA, alpha = 0.8, fill = "grey30") + 
  labs(y = "Density", x = "Value") + 
  NULL

ggsave(paste0(home, "/figures/supp/data_distribution.pdf"), width = 17, height = 17, units = "cm")

# Size distribution by year
d |> 
  distinct(pred_id, .keep_all = TRUE) |> 
  mutate(group = str_to_sentence(group)) |> 
  ggplot(aes(pred_length_cm, color = as.factor(year))) + 
  facet_wrap(~group, scales = "free", ncol = 1) + 
  geom_density(alpha = 0.8, fill = NA) + 
  labs(y = "Density", x = "Predator length (cm)", color = "Year") + 
  scale_color_viridis(discrete = TRUE, option = "mako") +
  NULL

ggsave(paste0(home, "/figures/supp/predator_sizes.pdf"), width = 11, height = 17, units = "cm")

# Sample size per haul
d |> 
  summarise(n = length(unique(pred_id)), .by = haul_id) |> 
  ggplot(aes(n)) +
  geom_histogram()

# How many with 3 or fewer and what are their sample sizes?
# d |> 
#   summarise(n = length(unique(pred_id)), .by = haul_id) |> 
#   mutate(s = ifelse(n < 3, "s", "l")) |> 
#   summarise(n = n(), .by = s)
# # (29/316)*100
# 
# # What is the size range of those 10%?
# d |> 
#   mutate(n = length(unique(pred_id)), .by = haul_id) |> 
#   filter(n > 1 & n < 11) |> 
#   summarise(max = max(pred_length_cm),
#             min = min(pred_length_cm),
#             .by = c(group, haul_id)) |> 
#   mutate(diff = max - min) |> 
#   as.data.frame()
#   #summarise(mean = mean(diff))
```

```{r}
# Calculate weights

# The reason to round here is because data come as per hour
d <- d |> 
  mutate(sampled_n = n(), .by = c(haul_id, group)) |> 
  mutate(f_weight = round(n_catch_flounder) / sampled_n,
         sc_weight = round(n_catch_small_cod) / sampled_n,
         lc_weight = round(n_catch_large_cod) / sampled_n) |> 
  mutate(f_weight = f_weight/mean(f_weight),
         sc_weight = sc_weight/mean(sc_weight),
         lc_weight = lc_weight/mean(lc_weight)) |> 
  mutate(f_weight2 = f_weight*2,
         sc_weight2 = sc_weight*2,
         lc_weight2 = lc_weight*2)
```

## Quick explore

Correlation between variables

```{r}
# Plot correlation between variables
d_cor <- d |>
  dplyr::select("oxygen_sc", "density_saduria_sc", "flounder_density_sc",
                "large_cod_density_sc", "small_cod_density_sc", "depth_sc")

corr <- round(cor(d_cor), 1)

ggcorrplot(corr, hc.order = TRUE, type = "lower", lab = TRUE, lab_size = 2.5) +
  theme_classic() + 
  theme(axis.text.x = element_text(angle = 90, vjust = 0.3))

# Sample size 
d |>
  group_by(species) |> 
  summarise(n = n())

d |>
  group_by(species, quarter) |> 
  summarise(n = n())
```

## Fit models

Groups are: small cod, large cod and flounder. Response variables are: saduria_rel_weight, benthic_rel_weight or total weight. The latter is only for adult cod, because essentially all prey are benthic for small cod and flounder.

Model random effect structure is selected with AIC (see script 02-)

```{r}
#| message: false
#| warning: false
# This is the reason we don't do total weight for flounder and small cod
d |>
  filter(tot_rel_weight > 0) |> 
  group_by(group) |> 
  mutate(ben_prop = benthic_rel_weight / tot_rel_weight) |> 
  summarise(mean_ben_prop = mean(ben_prop))
```

Covariates are: \~ 0 + fyear + fquarter + depth_sc + spatial + spatiotemporal random fields + density covariates. For saduria, we use saduria also in interaction with cod and flounder. For cod we use small cod because large and small cod are very correlated. For benthic and total prey, we instead use oxygen, more as a proxy, as the interaction variable

### Main models

```{r fit main models}
pred_flounder_sad <- list()
pred_flounder_ben <- list()
pred_cod_sad <- list()
pred_cod_ben <- list()
coef_sad <- list()
coef_ben <- list()
res_sad <- list()
res_ben <- list()
random_sad <- list()
random_ben <- list()
range_sad <- list()
range_ben <- list()

for(i in unique(d$group)) {
  
  dd <- filter(d, group == i)
  
    if(i == "flounder"){
      weigths <- dd$f_weight
      } else if(i == "small cod"){
        weigths <- dd$sc_weight
        } else if(i == "large cod"){
          weigths <- dd$lc_weight
          }
  
  mesh <- make_mesh(dd,
                    xy_cols = c("X", "Y"),
                    cutoff = 5)

  ggplot() +
    inlabru::gg(mesh$mesh) +
    coord_fixed() +
    geom_point(aes(X, Y), data = dd, alpha = 0.2, size = 0.5) +
    labs(x = "Easting (km)", y = "Northing (km)")
  
  ggsave(paste0(home, "/figures/supp/mesh_", i, ".pdf"), width = 17, height = 17, units = "cm")
  
  
  # Saduria model
  
  m_sad <- sdmTMB(saduria_rel_weight ~ 0 + fyear + fquarter + depth_sc + oxygen_sc + pred_length_cm_sc +
                    small_cod_density_sc*density_saduria_sc + 
                    flounder_density_sc*density_saduria_sc,
                  data = dd,
                  mesh = mesh,
                  family = tweedie(),
                  weights = weigths, 
                  spatiotemporal = "iid", 
                  spatial = "on",
                  time = "year")
  print(i)
  sanity(m_sad)
  print(m_sad)
  
  
  # Benthic model
  
    if(unique(dd$group) %in% c("large cod", "small cod")) {
      
      
      m_ben <- sdmTMB(benthic_rel_weight ~ 0 + fyear + fquarter + depth_sc + pred_length_cm_sc +
                        small_cod_density_sc*oxygen_sc + flounder_density_sc*oxygen_sc,
                      data = dd,
                      mesh = mesh,
                      family = tweedie(),
                      weights = weigths, 
                      spatiotemporal = "iid", 
                      spatial = "off", 
                      time = "year")
      print(i)
      sanity(m_ben)
      print(m_ben)
      
    } else {
      
      m_ben <- sdmTMB(benthic_rel_weight ~ 0 + fyear + fquarter + depth_sc + pred_length_cm_sc +
                        small_cod_density_sc*oxygen_sc + flounder_density_sc*oxygen_sc,
                      data = dd,
                      mesh = mesh,
                      family = tweedie(),
                      weights = weigths, 
                      spatiotemporal = "iid", 
                      spatial = "on",
                      time = "year")
      print(i)
      sanity(m_ben)
      print(m_ben)
      
    }
       
   
  # Spatial and spatiotemporal random effects
  d_haul <- dd |>
    distinct(haul_id, .keep_all = TRUE)

  preds_sad <- predict(m_sad, newdata = d_haul)
  preds_ben <- predict(m_ben, newdata = d_haul)

  random_sad[[i]] <- preds_sad
  random_ben[[i]] <- preds_ben

  # Residuals
  samps <- sdmTMBextra::predict_mle_mcmc(m_sad, mcmc_iter = 401, mcmc_warmup = 400)
  mcmc_res <- residuals(m_sad, type = "mle-mcmc", mcmc_samples = samps)
  dd$res <- as.vector(mcmc_res)

  res_sad[[i]] <- dd

  samps <- sdmTMBextra::predict_mle_mcmc(m_ben, mcmc_iter = 401, mcmc_warmup = 400)
  mcmc_res <- residuals(m_ben, type = "mle-mcmc", mcmc_samples = samps)
  dd$res <- as.vector(mcmc_res)

  res_ben[[i]] <- dd


  # Ranges
  range_sad[[i]] <- tidy(m_sad, effects = "ran_pars") |> filter(term == "range") |> mutate(group = i, model = "saduria")
  range_ben[[i]] <- tidy(m_ben, effects = "ran_pars") |> filter(term == "range") |> mutate(group = i, model = "benthos")


  # Conditional effects: flounder
  nd_flounder <- data.frame(expand_grid(
    density_saduria_sc = c(quantile(d$density_saduria_sc, probs = 0.05),
                           mean(d$density_saduria_sc),
                           quantile(d$density_saduria_sc, probs = 0.95)),
    flounder_density_sc = seq(quantile(dd$flounder_density_sc, probs = 0.05),
                              quantile(dd$flounder_density_sc, probs = 0.95),
                              length.out = 50))) |>
    mutate(year = 2020,
           fyear = as.factor(2020),
           fquarter = as.factor(1),
           pred_length_cm_sc = 0,
           oxygen_sc = 0,
           depth_sc = 0,
           small_cod_density_sc = 0)

  preds_flounder_sad <- predict(m_sad, newdata = nd_flounder, re_form = NA, re_form_iid = NA, se_fit = TRUE)
  preds_flounder_ben <- predict(m_ben, newdata = nd_flounder, re_form = NA, re_form_iid = NA, se_fit = TRUE)

  pred_flounder_sad[[i]] <- preds_flounder_sad |> mutate(group = i, xvar = "flounder")
  pred_flounder_ben[[i]] <- preds_flounder_ben |> mutate(group = i, xvar = "flounder")

  # Conditional effects: cod
  nd_cod <- data.frame(expand_grid(
    density_saduria_sc = c(quantile(d$density_saduria_sc, probs = 0.05),
                           quantile(d$density_saduria_sc, probs = 0.95)),
    small_cod_density_sc = seq(quantile(dd$small_cod_density_sc, probs = 0.05),
                               quantile(dd$small_cod_density_sc, probs = 0.95),
                               length.out = 50))) |>
    mutate(year = 2020,
           fyear = as.factor(2020),
           fquarter = as.factor(1),
           pred_length_cm_sc = 0,
           oxygen_sc = 0,
           depth_sc = 0,
           flounder_density_sc = 0) #

  preds_cod_sad <- predict(m_sad, newdata = nd_cod, re_form = NA, re_form_iid = NA, se_fit = TRUE)
  preds_cod_ben <- predict(m_ben, newdata = nd_cod, re_form = NA, re_form_iid = NA, se_fit = TRUE)

  pred_cod_sad[[i]] <- preds_cod_sad |> mutate(group = i, xvar = "cod")
  pred_cod_ben[[i]] <- preds_cod_ben |> mutate(group = i, xvar = "cod")

  # Coefficients
  coefs_sad <- bind_rows(tidy(m_sad, effects = "fixed", conf.int = TRUE)) |>
    mutate(species = "Cod (m)",
           response = "Saduria",
           sig = ifelse(estimate > 0 & conf.low > 0, "Y", "N"),
           sig = ifelse(estimate < 0 & conf.high < 0, "Y", sig))

  coefs_ben <- bind_rows(tidy(m_ben, effects = "fixed", conf.int = TRUE)) |>
    mutate(species = "Cod (m)",
           response = "Saduria",
           sig = ifelse(estimate > 0 & conf.low > 0, "Y", "N"),
           sig = ifelse(estimate < 0 & conf.high < 0, "Y", sig))

  coef_sad[[i]] <- coefs_sad |> mutate(group = i)
  coef_ben[[i]] <- coefs_ben |> mutate(group = i)

}
```

### Now do a separate model for adult cod looking at total prey

```{r total prey adult cod}
  dd <- filter(d, group == "large cod")
  
  mesh <- make_mesh(dd,
                    xy_cols = c("X", "Y"),
                    cutoff = 5)

  # Total model
  m_tot <- sdmTMB(tot_rel_weight ~ 0 + fyear + fquarter + depth_sc + pred_length_cm_sc +
                    large_cod_density_sc*oxygen_sc + flounder_density_sc*oxygen_sc,
                  data = dd,
                  mesh = mesh,
                  family = tweedie(),
                  weights = dd$lc_weight,
                  spatiotemporal = "iid", 
                  spatial = "off",
                  time = "year")
  
  sanity(m_tot)
  print(m_tot)
  
  # Residuals
  samps <- sdmTMBextra::predict_mle_mcmc(m_tot, mcmc_iter = 401, mcmc_warmup = 400)
  mcmc_res <- residuals(m_tot, type = "mle-mcmc", mcmc_samples = samps)
  dd$res <- as.vector(mcmc_res)

  res_tot <- dd
  
  # Range
  range_tot <- tidy(m_tot, effects = "ran_pars") |> filter(term == "range") |> mutate(group = "large cod", model = "total")

  # Spatial and spatiotemporal random effects
  d_haul <- dd |> 
    distinct(haul_id, .keep_all = TRUE)
  
  preds_tot <- predict(m_tot, newdata = d_haul)
  
  # Coefficients
  coefs_tot <- bind_rows(tidy(m_tot, effects = "fixed", conf.int = TRUE)) |> 
    mutate(species = "Cod (m)",
           response = "Saduria",
           sig = ifelse(estimate > 0 & conf.low > 0, "Y", "N"),
           sig = ifelse(estimate < 0 & conf.high < 0, "Y", sig))
  
  coefs_tot <- coefs_tot |> mutate(group = "large cod")
  
  # Conditional effects: flounder
  nd_flounder <- data.frame(expand_grid(
    flounder_density_sc = seq(quantile(dd$flounder_density_sc, probs = 0.05),
                              quantile(dd$flounder_density_sc, probs = 0.95),
                              length.out = 50))) |>
    mutate(year = 2020,
           fyear = as.factor(2020),
           fquarter = as.factor(1),
           pred_length_cm_sc = 0,
           oxygen_sc = 0,
           depth_sc = 0,
           large_cod_density_sc = 0)

  preds_flounder_tot <- predict(m_tot, newdata = nd_flounder, re_form = NA, re_form_iid = NA, se_fit = TRUE)
  pred_flounder_tot <- preds_flounder_tot |> mutate(group = "large cod", xvar = "flounder")
```

## Make dataframes

```{r make data frame of model output}
coef_df <- bind_rows(bind_rows(coef_sad) |> mutate(model = "Saduria"),
                     bind_rows(coef_ben) |> mutate(model = "Benthos"))

coef_df <- coef_df |> bind_rows(coefs_tot |> mutate(model = "Total"))

pred_cod_df <- bind_rows(bind_rows(pred_cod_sad) |> mutate(model = "Saduria"),
                         bind_rows(pred_cod_ben) |> mutate(model = "Benthos"))

pred_flounder_df <- bind_rows(bind_rows(pred_flounder_sad) |> mutate(model = "Saduria"),
                              bind_rows(pred_flounder_ben) |> mutate(model = "Benthos"))

res_df <- bind_rows(bind_rows(res_sad) |> mutate(model = "Saduria"),
                    bind_rows(res_ben) |> mutate(model = "Benthos"))

res_df <- res_df |> bind_rows(res_tot |> mutate(model = "Total"))

random_df <- bind_rows(bind_rows(random_sad) |> mutate(model = "Saduria"),
                       bind_rows(random_ben) |> mutate(model = "Benthos"))

random_df <- random_df |> bind_rows(preds_tot |> mutate(model = "Total"))

range_df <- bind_rows(range_tot, bind_rows(range_ben), bind_rows(range_sad))
```

## Plot spatial random effects

```{r spatial plots}
random_df <- random_df |>
  mutate(group = str_to_sentence(group))

# Saduria
plot_map_fc +
  geom_point(data = random_df |> filter(model == "Saduria"),
             aes(X*1000, Y*1000, color = omega_s), size = 0.9) +
  scale_color_gradient2() +
  facet_wrap(~factor(group, levels = c("Flounder", "Small cod", "Large cod"))) +
  labs(color = "Spatial\nrandom effect") +
  theme(axis.text.x = element_text(angle = 90),
        legend.position = "bottom",
        legend.key.width = unit(0.6, "cm"),
        legend.key.height = unit(0.2, "cm"))

ggsave(paste0(home, "/figures/supp/omega_sad.pdf"), width = 17, height = 9, units = "cm")


# Now do benthos (only for flounder)
plot_map_fc +
  geom_point(data = random_df |> filter(model == "Benthos" & group == "Flounder"),
             aes(X*1000, Y*1000, color = omega_s), size = 0.9) +
  scale_color_gradient2() +
  facet_wrap(~ group) +
  labs(color = "Spatial\nrandom effect") +
  theme(axis.text.x = element_text(angle = 90),
        legend.position = "right",
        legend.direction = "vertical",
        legend.key.width = unit(0.4, "cm"),
        legend.key.height = unit(0.4, "cm"))

ggsave(paste0(home, "/figures/supp/omega_ben.pdf"), width = 11, height = 11, units = "cm")
```

## Plot spatiotemporal random effects

```{r}
#| fig-width: 10

# Saduria
sad_eps_sc <- plot_map_fc +
  geom_point(data = random_df |> filter(model == "Saduria" & group == "Small cod"), aes(X*1000, Y*1000, color = epsilon_st), size = 0.9) +
  scale_color_gradient2() +
  facet_wrap(~year) +
  labs(color = "Spatiotemporal\nrandom effect") +
  theme(legend.position = c(0.84, 0.16),
        axis.text.x = element_text(angle = 90))

sad_eps_sc

ggsave(paste0(home, "/figures/supp/epsilon_sad_small_cod.pdf"), width = 17, height = 17, units = "cm")

sad_eps_lc <- plot_map_fc +
  geom_point(data = random_df |> filter(model == "Saduria" & group == "Large cod"), aes(X*1000, Y*1000, color = epsilon_st), size = 0.9) +
  scale_color_gradient2() +
  facet_wrap(~ year) +
  labs(color = "Spatiotemporal\nrandom effect") +
  theme(legend.position = c(0.84, 0.16),
        axis.text.x = element_text(angle = 90))

sad_eps_lc

ggsave(paste0(home, "/figures/supp/epsilon_sad_large_cod.pdf"), width = 17, height = 17, units = "cm")

sad_eps_f <- plot_map_fc +
  geom_point(data = random_df |> filter(model == "Saduria" & group == "Flounder"), aes(X*1000, Y*1000, color = epsilon_st), size = 0.9) +
  scale_color_gradient2() +
  facet_wrap(~ year) +
  labs(color = "Spatiotemporal\nrandom effect") +
  theme(legend.position = c(0.84, 0.16),
        axis.text.x = element_text(angle = 90))

sad_eps_f

ggsave(paste0(home, "/figures/supp/epsilon_sad_flounder.pdf"), width = 17, height = 17, units = "cm")


# Benthos
ben_eps_sc <- plot_map_fc +
  geom_point(data = random_df |> filter(model == "Benthos" & group == "Small cod"), aes(X*1000, Y*1000, color = epsilon_st), size = 0.9) +
  scale_color_gradient2() +
  facet_wrap(~ year) +
  labs(color = "Spatiotemporal\nrandom effect") +
  theme(legend.position = c(0.84, 0.16),
        axis.text.x = element_text(angle = 90))

ben_eps_sc

ggsave(paste0(home, "/figures/supp/epsilon_ben_small_cod.pdf"), width = 17, height = 17, units = "cm")

ben_eps_lc <- plot_map_fc +
  geom_point(data = random_df |> filter(model == "Benthos" & group == "Large cod"), aes(X*1000, Y*1000, color = epsilon_st), size = 0.9) +
  scale_color_gradient2() +
  facet_wrap(~ year) +
  labs(color = "Spatiotemporal\nrandom effect") +
  theme(legend.position = c(0.84, 0.16),
        axis.text.x = element_text(angle = 90))

ben_eps_lc

ggsave(paste0(home, "/figures/supp/epsilon_ben_large_cod.pdf"), width = 17, height = 17, units = "cm")

ben_eps_f <- plot_map_fc +
  geom_point(data = random_df |> filter(model == "Benthos" & group == "Flounder"), aes(X*1000, Y*1000, color = epsilon_st), size = 0.9) +
  scale_color_gradient2() +
  facet_wrap(~ year) +
  labs(color = "Spatiotemporal\nrandom effect") +
  theme(legend.position = c(0.84, 0.16),
        axis.text.x = element_text(angle = 90))

ben_eps_f

ggsave(paste0(home, "/figures/supp/epsilon_ben_flounder.pdf"), width = 17, height = 17, units = "cm")


# Total
tot_eps <- plot_map_fc +
    geom_point(data = preds_tot, aes(X*1000, Y*1000, color = epsilon_st), size = 0.9) +
    scale_color_gradient2() +
    facet_wrap(~ year) +
    labs(color = "Spatiotemporal\nrandom effect") +
    theme(legend.position = c(0.84, 0.16),
          axis.text.x = element_text(angle = 90))

tot_eps
```

## Plot range

```{r plot ranges}
pal <- (brewer.pal(n = 11, name = "RdYlBu")[c(11, 4, 1)])

range_df |> arrange(estimate)

range_df |> 
  mutate(group = str_to_sentence(group),
         model2 = ifelse(model == "benthos", "Benthic prey", model),
         model2 = ifelse(model == "saduria", "Saduria", model2),
         model2 = ifelse(model == "total", "Total prey", model2)) |> 
  ggplot(aes(model2, estimate, color = factor(group, levels = c("Flounder", "Small cod", "Large cod")))) + 
  geom_point(size = 2) +
  geom_hline(yintercept = 5, linetype = 2, alpha = 0.5) +
  scale_color_manual(values = pal) + 
  labs(x = "", y = "Range (km)", color = "Predator") + 
  theme(aspect.ratio = 1,
        legend.position = c(0.86, 0.86)) 

ggsave(paste0(home, "/figures/supp/ranges.pdf"), width = 11, height = 11, units = "cm")
```

## Plot residuals

```{r plot residuals}
# Plot residuals
res_df |>
  mutate(group = str_to_title(group)) |>
  ggplot(aes(sample = res)) +
  stat_qq(size = 0.75, shape = 21, fill = NA) +
  facet_grid(model ~ group) +
  stat_qq_line() +
  labs(y = "Sample Quantiles", x = "Theoretical Quantiles") +
  theme(aspect.ratio = 1)

ggsave(paste0(home, "/figures/supp/qq_relative_prey_weight.pdf"), width = 17, height = 17, units = "cm")
```

## Plot coefficients

```{r plot coeffficients}
coef_df$term |> unique()

# Fix some names
coef_df2 <- coef_df |>
  filter(!grepl('year', term)) |>
  filter(!grepl('quarter', term)) |>
  mutate(term = str_remove_all(term, "_sc"),
         term = str_remove_all(term, "density"),
         term = str_replace_all(term, "_", ""),
         term = str_replace_all(term, "geco", "ge co"),
         term = str_replace_all(term, "llco", "ll co"),
         term = str_replace(term, ":", " × "),
         term = str_to_sentence(term),
         group = str_to_sentence(group),
         model2 = ifelse(model == "Saduria", "Prey=Saduria", NA),
         model2 = ifelse(model == "Benthos", "Prey=Benthic prey", model2),
         model2 = ifelse(model == "Total", "Prey=Total prey", model2),
         sig2 = ifelse(sig == "Y", "N", "Y"),
         term = ifelse(term == "Predlengthcm", "Predator length", term),
         group2 = paste0("Predator=", group))

p1 <- 
  coef_df2 |>
  filter(model == "Saduria") |> 
  ggplot(aes(estimate, term, color = factor(group, levels = c("Flounder", "Small cod", "Large cod")), alpha = sig2)) +
  geom_stripped_rows(aes(y = term), inherit.aes = FALSE) +
  facet_grid(factor(model2, levels = c("Prey=Saduria", "Prey=Benthic prey")) ~ 
               factor(group2, levels = c("Predator=Flounder", "Predator=Small cod", "Predator=Large cod"))) + 
  geom_vline(xintercept = 0, linetype = 2, alpha = 0.5, color = "gray10", linewidth = 0.2) +
  geom_point(position = position_dodge(width = 0.5), size = 2) +
  geom_errorbar(aes(xmin = conf.low, xmax = conf.high), width = 0,
                position = position_dodge(width = 0.5)) +
  scale_alpha_manual(values = c(1, 0.4)) +
  scale_color_manual(values = pal) +
  labs(x = "Estimate", y = "", alpha = "95% CI crossing 0", color = "Model") +
  theme(legend.position = "bottom", 
        legend.direction = "vertical",
        axis.title.x = element_blank(),
        axis.text.y = ggtext::element_markdown()) +
  guides(color = "none",
         alpha = "none") +
  NULL

p2 <- 
  coef_df2 |> 
  filter(model == "Benthos") |> 
  ggplot(aes(estimate, term, color = factor(group, levels = c("Flounder", "Small cod", "Large cod")), alpha = sig2)) +
  geom_stripped_rows(aes(y = term), inherit.aes = FALSE) +
  #facet_wrap(~factor(model2, levels = c("Prey=Saduria", "Prey=Benthic prey")), ncol = 1) + 
  facet_grid(factor(model2, levels = c("Prey=Saduria", "Prey=Benthic prey")) ~ 
               factor(group2, levels = c("Predator=Flounder", "Predator=Small cod", "Predator=Large cod"))) +
  geom_vline(xintercept = 0, linetype = 2, alpha = 0.5, color = "gray10", linewidth = 0.2) +
  geom_point(position = position_dodge(width = 0.5), size = 2) +
  geom_errorbar(aes(xmin = conf.low, xmax = conf.high), width = 0,
                position = position_dodge(width = 0.5)) +
  scale_alpha_manual(values = c(1, 0.4)) +
  scale_color_manual(values = pal) +
  labs(x = "Estimate", y = "", alpha = "95% CI crossing 0", color = "Model") +
  theme(legend.position = "bottom", 
        legend.direction = "vertical",
        axis.title.x = element_blank(),
        strip.text.x.top = element_blank(),
        axis.text.y = ggtext::element_markdown()) +
  guides(color = "none",
         alpha = "none") +
  NULL

p3 <- 
  coef_df2 |> 
  filter(model == "Total") |> 
  ggplot(aes(estimate, term, color = factor(group, levels = c("Flounder", "Small cod", "Large cod")), alpha = sig2)) +
  geom_stripped_rows(aes(y = term), inherit.aes = FALSE) +
  #facet_wrap(~factor(model2), ncol = 1, strip.position = "right") + 
  facet_grid(model2 ~ factor(group2, levels = c("Predator=Flounder", "Predator=Small cod", "Predator=Large cod"))) +
  geom_vline(xintercept = 0, linetype = 2, alpha = 0.5, color = "gray10", linewidth = 0.2) +
  geom_point(position = position_dodge(width = 0.5), size = 2) +
  geom_errorbar(aes(xmin = conf.low, xmax = conf.high), width = 0,
                position = position_dodge(width = 0.5)) +
  scale_alpha_manual(values = c(1, 0.4)) +
  scale_color_manual(values = pal[3]) +
  labs(x = "Estimate", y = "", alpha = "95% CI crossing 0", color = "Model") +
  theme(legend.position = "left", 
        legend.direction = "vertical",
        strip.text.x.top = element_blank(),
        axis.text.y = ggtext::element_markdown()) +
  guides(color = "none", 
         alpha = guide_legend(title.position = "top", title.hjust = 0.5)) +
  NULL

p3b <- (plot_spacer() | p3) & plot_layout(widths = c(1, 5.3))

(p1 / p2 / (p3b)) +
  plot_annotation(tag_levels = "a") +
  plot_layout(axes = "collect") & coord_cartesian(xlim = c(min(coef_df2$conf.low), max(coef_df2$conf.high)))

ggsave(paste0(home, "/figures/coefs.pdf"), width = 17, height = 15, units = "cm")
```

## Plot year and quarter coefficients

```{r plot year effect}
#| fig-height: 8

# Fix some names
coef_df3 <- coef_df |>
  filter(grepl('year', term)) |>
  mutate(term = str_remove_all(term, "fyear"),
         group = str_to_sentence(group),
         term = as.numeric(term),
         model2 = ifelse(model == "Benthos", "Benthic prey", model),
         model2 = ifelse(model == "Saduria", "Saduria", model2),
         model2 = ifelse(model == "Total", "Total prey", model2))

ggplot(coef_df3, aes(term, exp(estimate), color = factor(group, levels = c("Flounder", "Small cod", "Large cod")), 
                     fill = factor(group, levels = c("Flounder", "Small cod", "Large cod")))) +
  facet_wrap(~model2, scales = "free", ncol = 1) +
  geom_point(position = position_dodge(width = 0.4)) +
  geom_errorbar(aes(ymin = exp(conf.low), ymax = exp(conf.high)), alpha = 0.4, width = 0,
                position = position_dodge(width = 0.4)) +
  scale_color_manual(values = pal) +
  scale_fill_manual(values = pal) +
  labs(x = "Year", y = "Standardized coefficient", color = "") +
  guides(color = guide_legend(title.position = "top", title.hjust = 0.5, ncol = 3),
         fill = "none") +
  theme(legend.position = c(0.5, 0.99),
        legend.direction = "vertical",
        legend.box.spacing = unit(-3, "pt"),
        legend.margin = margin(0, 0, 0, 0),
        strip.text.x.top = element_text(angle = 0, hjust = 0)) +
  NULL

ggsave(paste0(home, "/figures/supp/coefs_year.pdf"), width = 11, height = 21, units = "cm")
```

```{r quarter effect}
# Now do quarter
coef_df5 <- coef_df |>
  filter(term %in% c("fquarter4")) |> 
  mutate(group = str_to_sentence(group),
         model2 = ifelse(model == "Benthos", "Benthic prey", model),
         model2 = ifelse(model == "Saduria", "Saduria", model2),
         model2 = ifelse(model == "Total", "Total prey", model2)) |> 
  mutate(sig2 = ifelse(sig == "Y", "N", "Y"))

ggplot(coef_df5, aes(estimate, model2,
                     alpha = sig2,
                     color = factor(group, levels = c("Flounder", "Small cod", "Large cod")))) +
  geom_vline(xintercept = 0, linetype = 2, alpha = 0.5, color = "gray10", linewidth = 0.2) +
  geom_point(position = position_dodge(width = 0.5), size = 1.5) +
  geom_errorbar(aes(xmin = conf.low, xmax = conf.high), width = 0,
                position = position_dodge(width = 0.5)) +
  scale_alpha_manual(values = c(1, 0.4)) +
  scale_color_manual(values = pal) +
  labs(x = "", y = "Quarter 4 effect", alpha = "95% CI crossing 0", color = "Predator") +
  guides(color = guide_legend(title.position = "top", title.hjust = 0.5),
         alpha = guide_legend(title.position = "top", title.hjust = 0.5)) +
  geom_stripped_rows(aes(y = model2), inherit.aes = FALSE) +
  theme(legend.position = "bottom",
        legend.direction = "horizontal",
        legend.box = "horizontal",
        legend.box.spacing = unit(-3, "pt"),
        legend.margin = margin(0, 0, 0, 0)) + 
  coord_cartesian(expand = 0)

ggsave(paste0(home, "/figures/supp/coefs_quarter.pdf"), width = 17, height = 11, units = "cm")
```

## Conditional effects

```{r plot conditional effects}
# Which CI?
# https://www.calculator.net/confidence-interval-calculator.html
pred_df <- bind_rows(pred_cod_df, pred_flounder_df) |>
  mutate(group = str_to_sentence(group),
         sad = ifelse(density_saduria_sc == min(density_saduria_sc), "Low", NA),
         sad = ifelse(density_saduria_sc == max(density_saduria_sc), "High", sad)) |> 
  drop_na(sad)

pred_df2 <- bind_rows(pred_flounder_df,
                      pred_flounder_tot |> mutate(model = "Total")) |> 
  mutate(group = str_to_sentence(group),
         density_saduria_sc = replace_na(density_saduria_sc,
                                         median(density_saduria_sc, na.rm = TRUE)))

# 75% CI!!
ggplot(pred_df |> filter(model == "Saduria" & xvar == "flounder"),
       aes(flounder_density_sc, exp(est), color = sad, fill = sad)) +
  geom_ribbon(aes(ymin = exp(est - 1.150*est_se), ymax = exp(est + 1.150*est_se)),
              alpha = 0.3, color = NA) +
  geom_line() +
  facet_wrap(~factor(group, levels = c("Flounder", "Small cod", "Large cod")),
             scales = "free", 
             ncol = 3) +
  scale_color_brewer(palette = "Dark2") +
  scale_fill_brewer(palette = "Dark2") +
  labs(x = "Flounder density", y = "Relative saduria weight",
       color = "Saduria", fill = "Saduria") + 
  theme(legend.position = c(0.95, 0.84),
        strip.text.x.top = element_text(angle = 0, hjust = 0)) + 
  scale_x_continuous(breaks = c(-1, 0, 1)) +
  NULL

ggsave(paste0(home, "/figures/conditional_saduria_flounder.pdf"), width = 19, height = 7, units = "cm")
```

Showing conditional effects of oxygen on small cod feeding on benthos

```{r}

  dd <- filter(d, group == "large cod")

  mesh <- make_mesh(dd,
                    xy_cols = c("X", "Y"),
                    cutoff = 5)

  # Benthic model
  m_ben <- sdmTMB(benthic_rel_weight ~ 0 + fyear + fquarter + depth_sc + 
                    small_cod_density_sc*oxygen_sc + flounder_density_sc*oxygen_sc,
                  data = dd,
                  mesh = mesh,
                  family = tweedie(),
                  spatiotemporal = "iid",
                  spatial = "off",
                  time = "year")

  sanity(m_ben)

  nd <- data.frame(oxygen = seq(quantile(d$oxygen, probs = 0.05), quantile(d$oxygen, probs = 0.95),
                                length.out = 50)) |>
    mutate(year = 2020,
           fyear = as.factor(2020),
           fquarter = as.factor(1),
           density_saduria_sc = 0,
           flounder_density_sc = 0,
           depth_sc = 0,
           small_cod_density_sc = 0) |>
    mutate(oxygen_sc = (oxygen - mean(d$oxygen)) / sd(d$oxygen))


  p <- predict(m_ben, newdata = nd, re_form = NA, re_form_iid = NA, se_fit = TRUE)

  ggplot(p, aes(oxygen, exp(est))) +
    geom_line() +
    theme_sleek(base_size = 14) +
    geom_hline(yintercept = 0.0011, col = "red") +
    geom_hline(yintercept = 0.0016, col = "red") +
    geom_vline(xintercept = 4.8, col = "red") +
    geom_vline(xintercept = 7.6, col = "red") +
    NULL
  
((0.0016 - 0.0011) / 0.0011) * 100

```


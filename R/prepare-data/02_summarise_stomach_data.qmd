---
title: "Summarise stomach content data"
author: "Max Lindmark"
date: today
date-format: iso
toc: true
format: 
  html:
    page-layout: full
    embed-resources: true
knitr: 
  opts_chunk:
    fig.align: center
    out-width: 100%
editor: source
---

## Load packages

```{r load libraries}
#| message: false
#| warning: false

# Load libraries
library(tidyverse)
library(tidylog)
library(tidync)
library(tidyterra)
library(RCurl)
library(janitor)
library(terra)
library(viridis)
library(devtools)
library(ncdf4)

# Source code for map plots
source_url("https://raw.githubusercontent.com/maxlindmark/cod-interactions/main/R/functions/map-plot.R")
#source("R/functions/map-plot.R")

home <- here::here()
```

## Read data

```{r read data}
#| warning: false

d <- read_csv(paste0(home, "/data/clean/full_stomach_data.csv"))
```

## Summarize and organize data
We want 1 row = 1 predator and the total weight for each present prey type

```{r summarize data}
#| message: false
#| warning: false

# Calculate total weight of prey by predator ID and prey species (i.e., across prey sizes). First create wide data frame so that I can sum easily across prey groups (columns)
d_wide <- d %>% 
  group_by(pred_id, prey_latin_name) %>% 
  summarise(tot_prey_weight_g = sum(prey_weight_g)) %>% 
  ungroup() %>% 
  pivot_wider(names_from = prey_latin_name, values_from = tot_prey_weight_g) %>% 
  mutate_all(~ifelse(is.na(.), 0, .)) %>% 
  clean_names()

# Now make some calculations and aggregate to some taxonomic level. Since all columns are assigned to some higher level group (or the same group), the sum of these is the total stomach content. Note that I have one group for unidentified clupeids, but also sprat and herring. So if I want the total of some aggregated group, then I need to add all the sub-groups.

sort(colnames(d_wide %>% dplyr::select(-pred_id)))

d_wide2 <- d_wide %>% 
  mutate(amphipoda_tot = gammarus_sp + monoporeia_affinis + amphipoda + hyperia_galba,
         bivalvia_tot =  bivalvia + mytilus_sp + mytilus_sp_2 + mya_arenaria + macoma_balthica + 
             mytilus_edulis + limecola_balthica + limecola_balthica_2,
         clupeidae_tot = clupeidae + clupeidae_2,
         clupea_harengus_tot = clupea_harengus + clupea_harengus_2,
         gadus_morhua_tot = gadus_morhua,
         gobiidae_tot = gobiidae + gobiidae_2 + gobius_niger + neogobius_melanostomus + aphia_minuta,
         mysidae_tot = mysidae + neomysis_integer + mysis_mixta + mysida + gastrosacus,
         non_bio_tot = stone + stone_2 + plastic + plastics + sand + wood + carbon + carbon_2 + wood_2 + 
             litter_plastics + sand_2,
         other_crustacea_tot = pontoporeia_femorata + pontoporeia_femotara + crangon + 
             crangon_crangon + idotea_balthica + cumacea + idotea_sp +
             praunus_flexuosus + crustacea + diastylis_rathkei + palaemon_sp + palaemon_elegans + caridea +
             copepoda + pontoporeiidae + decapoda + pontoporeidae, 
         other_tot = halicryptus_spinulosus + halicryptus_spinulosus_2 + priapulus + priapulus_caudatus + priapulus_caudatus_2 + algae + aglae + 
             waste + remains + remains_2 + hydrobia_sp + 
             priapulida + halicryptus + digestive_tract + mucus + mucus_2 + 
             halicryptus_spinolusus + priapulida_2 + prapulida,
         other_pisces_tot = pisces + pisces_2 + enchelyopus_cimbrius + engraulis_encrasicolus +
             gasterosteus_aculeatus + scales + scales_2 + scomber_scombrus +
             pungitius_pungitius + zoarces_viviparus + ammodytidae +
             pleuronectidae + gasterosteidae + agonus_cataphractus + myoxocephalus_scorpius,
         platichthys_flesus_tot = platichthys_flesus,
         polychaeta_tot = bylgides_sarsi + scoloplos_armiger + hediste_diversicolor +
             phyllodocida + polychaeta + pectinaria_sp + nephtys_ciliata,
         saduria_entomon_tot = saduria_entomon,
         sprattus_sprattus_tot = sprattus_sprattus + sprattus_sprattus_2
         )

# Check it's correct! The sum of all groups should be the sum of all categories
colnames(d_wide2 %>% dplyr::select(-pred_id))

t <- d_wide2 %>%
  dplyr::select(-pred_id) %>% 
  mutate(all_cat_sum = rowSums(.[1:101]),
         group_sum = rowSums(.[102:116])) %>% 
  dplyr::select(all_cat_sum, group_sum) %>%
  filter(!all_cat_sum == group_sum)  

identical(t$all_cat_sum, t$group_sum)

# Must be some rounding error...
d_wide2 %>%
  dplyr::select(-pred_id) %>% 
  mutate(all_cat_sum = rowSums(.[1:101]),
         group_sum = rowSums(.[102:116])) %>% 
  dplyr::select(all_cat_sum, group_sum) %>%
  ggplot(aes(all_cat_sum, group_sum)) +
  geom_point() +
  geom_abline(color = "red")

# Select only columns aggregated columns (ending with _tot) (all columns (prey) are represented there)
colnames(d_wide2)

d_wide3 <- d_wide2 %>%
  dplyr::select(pred_id, ends_with("_tot"))

# Add back in other information about the predator ID
d_sel <- d %>%
  dplyr::select(predator_latin_name, species, pred_weight_g, pred_length_cm,
                year, quarter, month, ices_rect, subdiv, haul_id, smhi_serial_no,
                X, Y, lat, lon, pred_id, fle_kg_km2, mcod_kg_km2, scod_kg_km2, date,
                bottom_depth
                ) %>% 
  distinct(pred_id, .keep_all = TRUE)

d_wide3 <- left_join(d_wide3, d_sel)

# mutate(size_group = ifelse(lengthcl >= 100 & lengthcl < 250, "small", NA),
#        size_group = ifelse(lengthcl >= 250 & lengthcl < 500, "medium", size_group)) %>% 

d_wide3 <- d_wide3 %>%
  mutate(group = NA,
         group = ifelse(species == "Flounder", "flounder", group),
         group = ifelse(species == "Cod" & pred_length_cm >= 10 & pred_length_cm <= 25, "small cod", group),
         group = ifelse(species == "Cod" & pred_length_cm > 25 & pred_length_cm <= 50, "large cod", group))
```

## Add covariates

```{r}
dat <- d_wide3 %>% 
  mutate(#month = ifelse(quarter == 1, 2, 11), # most common months: only for prediction grid
         month_year = paste(month, year, sep = "_"))
```

### Depth

```{r add depth}
dep_raster <- terra::rast(paste0(home, "/data/Mean depth natural colour (with land).nc"))
class(dep_raster)
crs(dep_raster, proj = TRUE)

plot(dep_raster)

dat$depth <- terra::extract(dep_raster, dat %>% dplyr::select(lon, lat))$elevation

ggplot(dat, aes(lon, lat, color = depth*-1)) + 
  geom_point()

dat$depth <- dat$depth*-1

dat <- dat |> drop_na(depth)

plot_map + 
  geom_point(data = dat, aes(X*1000, Y*1000, color = depth)) + 
  scale_color_viridis()

ggplot(dat, aes(depth, bottom_depth)) + 
  geom_point() + 
  geom_abline()

# So strange. What does it look like in the normal data?
t <- dat %>% 
  filter(bottom_depth > 250)
  
ggplot(t, aes(depth, bottom_depth/10)) + 
  geom_point() + 
  geom_abline()

strange_dept <- d %>% filter(haul_id %in% c(t$haul_id))

strange_dept %>% 
  summary()

unique(strange_dept$quarter)
unique(strange_dept$year)
unique(strange_dept$month)
unique(strange_dept$subdiv)
```

### Saduria

```{r saduria}
saduria <- terra::rast(paste0(home, "/data/saduria-tif/FWBiomassm_raster_19812019presHighweightcor_no0_newZi.tif"))

WGS84 <- "+proj=longlat +datum=WGS84"

saduria_latlon <- terra::project(saduria, WGS84)

density_saduria <- terra::extract(saduria_latlon, dat %>% dplyr::select(lon, lat))

dat$density_saduria <- density_saduria$FWBiomassm_raster_19812019presHighweightcor_no0_newZi

plot_map + 
  geom_point(data = dat, aes(X*1000, Y*1000, color = density_saduria)) +
  scale_color_viridis(trans = "sqrt", name = "Saduria biomass density")
```

### Oxygen

```{r}
# For temperature and oxygen, we need to use two different rasters because we don't have the updated data in the re-analysis
# TODO: check this later, might not be needed to split
dat_1 <- dat %>% filter(year < 2022)
dat_2 <- dat %>% filter(year >= 2022)
```

Oxygen data for the whole time period was delayed on Copernicus, so for 2022 I had to use the forecast data. Slightly different format, hence I do oxygen in two steps.

#### Old oxygen

```{r extract oxygen}
# tidync: https://ropensci.org/blog/2019/11/05/tidync/
# tidyterra: https://dieghernan.github.io/tidyterra/reference/as_spatraster.html
ncin <- nc_open(paste0(home, "/data/NEMO/cmems_mod_bal_bgc_my_P1D-m_1702039771395.nc"))
print(ncin)

oxy_tibble <- tidync(paste0(home, "/data/NEMO/cmems_mod_bal_bgc_my_P1D-m_1702039771395.nc")) %>%
  hyper_tibble() %>% 
  mutate(date = as.Date(time, origin = '1900-01-01')) %>% 
  mutate(month = month(date),
         year = year(date)) %>% 
  mutate(oxy = o2b) %>% 
  summarise(oxy = mean(o2b), .by = c(lon, lat, year, month)) %>% # average by month
  mutate(oxy = oxy*0.0223909, # convert to ml/L
         month_year = paste(month, year, sep = "_"))
  
# Loop, make raster and extract
oxy_list <- list()

for(i in unique(dat_1$month_year)) {
  
  dat_sub <- filter(dat_1, month_year == i)
  oxy_tibble_sub <- filter(oxy_tibble, month_year == i)
  
  # Convert to raster
  oxy_raster <- as_spatraster(oxy_tibble_sub, xycols = 1:2,
                              crs = "WGS84", digits = 3)
  
  # Extract from raster
  dat_sub$oxy <- terra::extract(oxy_raster$oxy, dat_sub %>% dplyr::select(lon, lat))$oxy

  # Save
  oxy_list[[i]] <- dat_sub
  
}

oxy_df <- bind_rows(oxy_list)
```

#### New oxygen

Note this is from the projection, not the re-analysis because it hasn't been updated

```{r new oxy q1}
# tidync: https://ropensci.org/blog/2019/11/05/tidync/
# tidyterra: https://dieghernan.github.io/tidyterra/reference/as_spatraster.html
ncin_q1 <- nc_open(paste0(home, "/data/NEMO/BAL-ERGOM_BGC-MonthlyMeans-202202.nc"))
print(ncin_q1)

oxy_tibble_22q1 <- tidync(paste0(home, "/data/NEMO/BAL-ERGOM_BGC-MonthlyMeans-202202.nc")) %>%
  activate("o2b") %>% 
  hyper_tibble(select_var = "o2b") %>% 
  mutate(date = as.Date(time, origin = '1900-01-01')) %>% 
  mutate(month = month(date),
         year = year(date)) %>% 
  mutate(oxy = o2b) %>% 
  summarise(oxy = mean(o2b), .by = c(lon, lat, year, month)) %>% # average by month
  mutate(oxy = oxy*0.0223909, # convert to ml/L
         month_year = paste(month, year, sep = "_"))
  

ncin_q4 <- nc_open(paste0(home, "/data/NEMO/BAL-ERGOM_BGC-MonthlyMeans-202211.nc"))
print(ncin_q4)

oxy_tibble_22q4 <- tidync(paste0(home, "/data/NEMO/BAL-ERGOM_BGC-MonthlyMeans-202211.nc")) %>%
  activate("o2b") %>% 
  hyper_tibble(select_var = "o2b") %>% 
  mutate(date = as.Date(time, origin = '1900-01-01')) %>% 
  mutate(month = month(date),
         year = year(date)) %>% 
  mutate(oxy = o2b) %>% 
  summarise(oxy = mean(o2b), .by = c(lon, lat, year, month)) %>% # average by month
  mutate(oxy = oxy*0.0223909, # convert to ml/L
         month_year = paste(month, year, sep = "_"))


oxy_tibble_new <- bind_rows(oxy_tibble_22q1, oxy_tibble_22q4)

unique(oxy_tibble_new$month_year)

# Loop, make raster and extract
oxy_list <- list()

dat_2 <- dat_2 %>%
  mutate(month_year = ifelse(month_year == "3_2022", "2_2022", month_year))

oxy_list_new <- list()
# No need to for loop or bind rows all new and loop the two quarters, also compares
for(i in unique(dat_2$month_year)) {
  
  dat_sub <- filter(dat_2, month_year == i)
  oxy_tibble_sub <- filter(oxy_tibble_new, month_year == i)
  
  # Convert to raster
  oxy_raster <- as_spatraster(oxy_tibble_sub, xycols = 1:2,
                              crs = WGS84, digits = 3)
  
  # Extract from raster
  dat_sub$oxy <- terra::extract(oxy_raster$oxy, dat_sub %>% dplyr::select(lon, lat))$oxy

  # Save
  oxy_list_new[[i]] <- dat_sub
  
}

oxy_df_new <- bind_rows(oxy_list_new)
```

### Join with stomach data

```{r}
# Add oxygen (bind_rows first)
oxy_all <- bind_rows(oxy_df, oxy_df_new) %>% 
  dplyr::select(lon, lat, haul_id, oxy) %>%
  distinct(lon, lat, haul_id, oxy)

dat <- tidylog::left_join(dat, oxy_all, by = c("lon", "lat", "haul_id"))
 
ggplot(dat, aes(lon, lat, color = oxy)) +
  geom_point() +
  facet_wrap(~month_year)

dat <- dat %>% dplyr::select(-bottom_depth)
```

Save

```{r save}
write_csv(dat, paste0(home, "/data/clean/aggregated_stomach_data.csv"))
```
